using GenerativeAI.Types;

namespace GenerativeAI.Core;

internal static class ResponseHelper
{
    /// <summary>
    /// Format Error Message
    /// </summary>
    /// <param name="response"></param>
    /// <returns></returns>
    internal static string FormatBlockErrorMessage(GenerateContentResponse response)
    {
#if NET6_0_OR_GREATER
        ArgumentNullException.ThrowIfNull(response);
#else
        if (response == null)
            throw new ArgumentNullException(nameof(response));
#endif
        var message = "";
        if (response.Candidates == null || response.Candidates.Length == 0 && response.PromptFeedback!=null && response.PromptFeedback.BlockReason >0)
        {
            message = FormatErrorMessage(response.PromptFeedback!.BlockReason!.Value);
           
        }
        else if (response.Candidates[0] != null)
        {
            var firstCandidate = response.Candidates[0];
            if (firstCandidate.FinishReason.HasValue && HadBadFinishReason(firstCandidate))
            {
                message += $": {FormatErrorMessage(firstCandidate.FinishReason.Value)}";
            }
        }
        return message;
    }

    internal static bool HadBadFinishReason(Candidate candidate)
    {
        if (candidate.FinishReason == FinishReason.RECITATION || candidate.FinishReason == FinishReason.SAFETY)
        {
            return false;
        }
        else return true;
    }

    internal static string FormatErrorMessage(BlockReason response)
    {
        return response switch
        {
            BlockReason.BLOCK_REASON_UNSPECIFIED => "The response was blocked for an unspecified reason.",
            BlockReason.SAFETY => "The response was blocked due to safety concerns. Inspect the safety ratings for more details.",
            BlockReason.OTHER => "The response was blocked due to unknown reasons.",
            BlockReason.BLOCKLIST => "The response was blocked due to the terminology being included in the blocklist.",
            BlockReason.PROHIBITED_CONTENT => "The response was blocked due to prohibited content.",
            BlockReason.IMAGE_SAFETY => "The response was blocked due to unsafe image generation content.",
            _ => "The response was blocked for an unexpected reason."
        };
    }
    
    internal static string FormatErrorMessage(FinishReason response)
    {
        return response switch
        {
            FinishReason.FINISH_REASON_UNSPECIFIED => "The generation stopped for an unspecified reason.",
            FinishReason.STOP => "The generation stopped at a natural stopping point or after encountering a provided stop sequence.",
            FinishReason.MAX_TOKENS => "The generation stopped because the maximum number of tokens was reached.",
            FinishReason.SAFETY => "The generation stopped due to flagged safety concerns in the content.",
            FinishReason.RECITATION => "The generation stopped due to flagged recitation of restricted content.",
            FinishReason.LANGUAGE => "The generation stopped because it encountered unsupported language in the content.",
            FinishReason.OTHER => "The generation stopped for an unknown or unspecified reason.",
            FinishReason.BLOCKLIST => "The generation stopped because the content contains forbidden or blocklisted terms.",
            FinishReason.PROHIBITED_CONTENT => "The generation stopped due to the content potentially containing prohibited material.",
            FinishReason.SPII => "The generation stopped because the content might include Sensitive Personally Identifiable Information (SPII).",
            FinishReason.MALFORMED_FUNCTION_CALL => "The generation stopped because a malformed or invalid function call was generated by the model.",
            FinishReason.IMAGE_SAFETY => "The generation stopped because the generated images were flagged for containing safety violations.",
            _ => "The generation stopped for an unexpected or unhandled reason."
        };
    }
}