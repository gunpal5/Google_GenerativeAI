using System.Text.Json.Serialization;

namespace GenerativeAI.Types;

/// <summary>
/// A datatype containing media that is part of a multi-part <see cref="Content"/> message.
/// A <see cref="Part"/> consists of data which has an associated datatype.<br/>
/// A <see cref="Part"/> must have a fixed IANA MIME type identifying the type and subtype of the media
/// if the <see cref="Part.InlineData"/> field is filled with raw bytes.
/// </summary>
/// <seealso href="https://ai.google.dev/api/caching#Part">See Official Documentation</seealso>
public class Part
{
    /// <summary>
    /// Inline text.
    /// </summary>
    [JsonPropertyName("text")]
    public string? Text { get; set; } 

    /// <summary>
    /// Inline media bytes.
    /// </summary>
    [JsonPropertyName("inlineData")]
    public Blob? InlineData { get; set; } 

    /// <summary>
    /// A predicted <see cref="FunctionCall"/> returned from the model that contains a string
    /// representing the <see cref="FunctionDeclaration.Name"/> with the arguments and their values.
    /// </summary>
    [JsonPropertyName("functionCall")]
    public FunctionCall? FunctionCall { get; set; } 

    /// <summary>
    /// The result output of a <see cref="FunctionCall"/> that contains a string representing the
    /// <see cref="FunctionDeclaration.Name"/> and a structured JSON object containing any output
    /// from the function is used as context to the model.
    /// </summary>
    [JsonPropertyName("functionResponse")]
    public FunctionResponse? FunctionResponse { get; set; } 

    /// <summary>
    /// URI based data.
    /// </summary>
    [JsonPropertyName("fileData")]
    public FileData? FileData { get; set; } 

    /// <summary>
    /// Code generated by the model that is meant to be executed.
    /// </summary>
    [JsonPropertyName("executableCode")]
    public ExecutableCode? ExecutableCode { get; set; } 

    /// <summary>
    /// Result of executing the <see cref="ExecutableCode">ExecutableCode</see>.
    /// </summary>
    [JsonPropertyName("codeExecutionResult")]
    public CodeExecutionResult? CodeExecutionResult { get; set; }
    
    /// <summary>
    /// Metadata for a given video.
    /// </summary>
    [JsonPropertyName("videoMetadata")]
    public VideoMetadataResult? VideoMetadata { get; set; }

    /// <summary>
    /// Represents a structured part of content that can include various types of data,
    /// such as plain text, inline data, function calls, or code execution details.
    /// </summary>
    public Part()
    {
        
    }

    /// <summary>
    /// Represents a component of a multi-part message in content processing. A Part includes media
    /// or data of various forms such as text, binary data, function invocation, or code execution details.
    /// Each Part is associated with a specific data type.
    /// </summary>
    public Part(string text)
    {
        this.Text = text;
    }
    
    /// <summary>
    /// Indicates if the part is thought from the model.
    /// </summary>
    [JsonPropertyName("thought")]
    public bool? Thought { get; set; }

    /// <summary>
    /// An opaque signature for the thought so it can be reused in subsequent requests.
    /// A base64-encoded string.
    /// </summary>
    [JsonPropertyName("thoughtSignature")]
    public string? ThoughtSignature { get; set; }
}

 /// <summary>
    /// Metadata describes the input video content.
    /// </summary>
    public class VideoMetadataResult
    {
        /// <summary>
        /// Optional. The end offset of the video.
        /// </summary>
        [JsonPropertyName("endOffset")]
        public string? EndOffset { get; set; }

        /// <summary>
        /// Optional. The start offset of the video.
        /// </summary>
        [JsonPropertyName("anyOf")]
        public List<Schema>? AnyOf { get; set; }

        /// <summary>
        /// Optional. The description of the data.
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Optional. Possible values of the element of primitive type with enum format.
        /// </summary>
        [JsonPropertyName("enum")]
        public List<string>? Enum { get; set; }

        /// <summary>
        /// Optional. The format of the data.
        /// </summary>
        [JsonPropertyName("format")]
        public string? Format { get; set; }

        /// <summary>
        /// Optional. Schema of the elements of Type.ARRAY.
        /// </summary>
        [JsonPropertyName("items")]
        public Schema? Items { get; set; }

        /// <summary>
        /// Optional. Maximum number of the elements for Type.ARRAY.
        /// </summary>
        [JsonPropertyName("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Optional. Maximum value of the Type.INTEGER and Type.NUMBER
        /// </summary>
        [JsonPropertyName("maximum")]
        public float? Maximum { get; set; }

        /// <summary>
        /// Optional. Minimum number of the elements for Type.ARRAY.
        /// </summary>
        [JsonPropertyName("minItems")]
        public int? MinItems { get; set; }

        /// <summary>
        /// Optional. Minimum value of the Type.INTEGER and Type.NUMBER
        /// </summary>
        [JsonPropertyName("minimum")]
        public float? Minimum { get; set; }

        /// <summary>
        /// Optional. Indicates if the value may be null.
        /// </summary>
        [JsonPropertyName("nullable")]
        public bool? Nullable { get; set; }

        /// <summary>
        /// Optional. Properties of Type.OBJECT.
        /// </summary>
        [JsonPropertyName("properties")]
        public Dictionary<string, Schema>? Properties { get; set; }

        /// <summary>
        /// Optional. The order of the properties.
        /// </summary>
        [JsonPropertyName("propertyOrdering")]
        public List<string>? PropertyOrdering { get; set; }

        /// <summary>
        /// Optional. Required properties of Type.OBJECT.
        /// </summary>
        [JsonPropertyName("required")]
        public List<string>? Required { get; set; }

        /// <summary>
        /// Optional. The title of the Schema.
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get; set; }
       

        /// <summary>
        /// Instructions for the model to steer it toward better performance.
        /// </summary>
        [JsonPropertyName("systemInstruction")]
        public object? SystemInstruction { get; set; }

        /// <summary>
        /// Code that enables the system to interact with external systems to
        /// perform an action outside of the knowledge and scope of the model.
        /// </summary>
        [JsonPropertyName("tools")]
        public List<Tool>? Tools { get; set; }

        /// <summary>
        /// Configuration that the model uses to generate the response. Not
        /// supported by the Gemini Developer API.
        /// </summary>
        [JsonPropertyName("generationConfig")]
        public GenerationConfig? GenerationConfig { get; set; }
    }
    
   